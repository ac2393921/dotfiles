{
  "inf": {
    "prefix": ["inf"],
    "body": ["float(\"INF\")"],
    "description": ""
  },
  "yes": {
    "prefix": ["yes"],
    "body": ["print(\"Yes\")"],
    "description": ""
  },
  "no": {
    "prefix": ["no"],
    "body": ["print(\"No\")"],
    "description": ""
  },
  "ddict": {
    "prefix": ["ddict"],
    "body": ["from collections import defaultdict"],
    "description": ""
  },
  "main": {
    "prefix": ["main"],
    "body": ["if __name__ == \"__main__\":"],
    "description": ""
  },
  "iinput": {
    "prefix": ["iinput"],
    "body": ["int(input())"],
    "description": ""
  },
  "imap": {
    "prefix": ["imap"],
    "body": ["map(int, input().split())"],
    "description": ""
  },
  "smap": {
    "prefix": "smap",
    "body": "map(str, input().split())"
  },
  "union-find": {
    "prefix": "union-find",
    "body": [
      "from collections import defaultdict",
      "",
      "class UnionFind():",
      "\tdef __init__(self, n):",
      "\t\tself.n = n",
      "\t\tself.parents = [-1] * n",
      "",
      "\tdef find(self, x):",
      "\t\tif self.parents[x] < 0:",
      "\t\t\treturn x",
      "\t\telse:",
      "\t\t\tself.parents[x] = self.find(self.parents[x])",
      "\t\t\treturn self.parents[x]",
      "",
      "\tdef union(self, x, y):",
      "\t\tx = self.find(x)",
      "\t\ty = self.find(y)",
      "",
      "\t\tif x == y:",
      "\t\t\treturn",
      "",
      "\t\tif self.parents[x] > self.parents[y]:",
      "\t\t\tx, y = y, x",
      "\t\tself.parents[x] += self.parents[y]",
      "\t\tself.parents[y] = x",
      "",
      "\tdef size(self, x):",
      "\t\treturn -self.parents[self.find(x)]",
      "",
      "\tdef same(self, x, y):",
      "\t\treturn self.find(x) == self.find(y)",
      "",
      "\tdef members(self, x):",
      "\t\troot = self.find(x)",
      "\t\treturn [i for i in range(self.n) if self.find(i) == root]",
      "",
      "\tdef roots(self):",
      "\t\treturn [i for i, x in enumerate(self.parents) if x < 0]",
      "",
      "\tdef group_count(self):",
      "\t\treturn len(self.roots())",
      "",
      "\tdef all_group_members(self):",
      "\t\tgroup_members = defaultdict(list)",
      "\t\tfor member in range(self.n):",
      "\t\t\tgroup_members[self.find(member)].append(member)",
      "\t\treturn group_members",
      "",
      "\tdef __str__(self):",
      "\t\treturn '\\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())"
    ]
  },
  "binary-search": {
    "prefix": ["bsearch"],
    "body": ["while l <= r:", "\tm = (l + r) // 2"],
    "description": ""
  }
}
